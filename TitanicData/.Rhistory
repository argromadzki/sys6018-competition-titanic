# ----PROBLEM 3----
# create a new column with the difference between each student's
# midterm and final exam scores; then find x < 2 and x > 10
cg["grade_difference"] <- NA
cg
cg['grade_difference'] <- abs(cg$Midterm - cg$Final)
cg
consistent <- group_by( cg, grade_difference <= 2 )
library(tidyverse)
consistent <- group_by( cg, grade_difference <= 2 )
consistent
View(cg)
View(cg)
stat_andB <- group_by( cg, prev == 'Y', course_average >= 83)
nostat_andB <- group_by(cg, prev == 'N', course_average >= 83)
library(tidyverse)
cg <- read_csv("coursegrades.csv")
ff <- read_csv("fastfood.csv")
# Alex Gromadzki
# Homework 1 -- arg2eu
library(tidyverse)
cg <- read_csv("coursegrades.csv")
ff <- read_csv("fastfood.csv")
cg
# ----PROBLEM 1----
# find the course average
# 10 HW /200
# 20 Quiz /45
# 30 Midterm /100
# 40 Final /100
cg["course_average"] <- NA
cg
cg$"course_average" <- (.1*(cg$HW/200)+.2*(cg$Quiz/45)+
.3*(cg$Midterm/100) +.4*(cg$Final/100)) * 100
cg
#note to self, I have this in percent, not decimal
# double check -- ID AAMUK should have 80.58% per below
.1*(197/200) + .2*(39/45) +.3*(68/100) + .4*(82.5/100)
p <-sum(cg$course_average > 82)/483 # 1.A. count how many studetns had over an 82%, then
# divide by 483 (the number of obsvervations)
# using formula find 95% confidence that 36% of kids got 82 avgs
# z here is 1.96 for 95% interval
# p +- z * sqrt [p*(1-p) / n]
p + 1.96 * sqrt(p*(1-p)/ 483) # output = 0.4094313
p - 1.96 * sqrt(p*(1-p)/ 483) # output = 0.3234879
# ----PROBLEM 2 ----
# next method, using critical t-values
t = qt(.975, 482) # remember to find a t-value for 95% interval, you need to find .025 for either tail
t
cgxbar <- mean(cg$course_average)
cgxbar + t * sd(cg$course_average) / sqrt(483) # output = 78.24951
cgxbar - t * sd(cg$course_average) / sqrt(483) # output = 76.27501
# ----PROBLEM 3----
# create a new column with the difference between each student's
# midterm and final exam scores; then find x < 2 and x > 10
cg["grade_difference"] <- NA
cg
cg['grade_difference'] <- abs(cg$Midterm - cg$Final)
cg
consistent <- group_by( cg, grade_difference <= 2 )
consistent
consistent_count <-
inconsistent <- group_by( cg, grade_difference >= 10)
# ----PROBLEM 4 ----
# need two groups -- stats and non stats students who got a B or up
stat_andB <- group_by( cg, prev == 'Y', course_average >= 83)
nostat_andB <- group_by(cg, prev == 'N', course_average >= 83)
# stdev_prop <- sqrt(((p1*(1-p1))/n1) + ((p2*(1-p2))/n2))
# high_bound_ci_prop <- z + stdev_prop
# low_bound_ci_prop <- z - stdev_prop
cg
View(cg)
# need two groups -- stats and non stats students who got a B or up
stat_andB <- group_by( cg, Prev == 'Y', course_average >= 83)
nostat_andB <- group_by(cg, Prev == 'N', course_average >= 83)
consistent <- group_by( cg, grade_difference <= 2 )
consistent
consistent_count <- (count(consistent))
consistent_count
consistent_count <- (count(consistent == TRUE))
consistent <- group_by( cg, grade_difference <= 2)
consistent
consistent_count <- (sum(consistent == TRUE))
consistent_count
inconsistent <- group_by( cg, grade_difference >= 10)
inconsistent_count <- (sum (inconsistent == TRUE))
consistent <- group_by( cg, grade_difference <= 2)
consistent
consistent_count <- (sum(consistent == TRUE))
consistent_count
inconsistent <- group_by( cg, grade_difference >= 10)
inconsistent_count <- (sum (inconsistent == TRUE))
inconsistent_count
consistent <- group_by( cg, grade_difference <= 2)    # creates a T/F column -- T is all less than or equal to 2
consistent
library(tidyverse)
cg <- read_csv("coursegrades.csv")
ff <- read_csv("fastfood.csv")
cg['grade_difference'] <- abs(cg$Midterm - cg$Final)
consistent <- group_by( cg, grade_difference <= 2)    # creates a T/F column -- T is all less than or equal to 2
consistent
consistent_count <- (sum(consistent == TRUE))
consistent_mean <- mean(consistent == TRUE)
consistent_mean
consistent_mean <- mean(cg$consistent == TRUE)
consistent_mean
consistent_mean <- mean( cg$course_average, consistent == TRUE)
consistent_mean
cg["grade_difference"] <- NA
cg
cg['grade_difference'] <- abs(cg$Midterm - cg$Final)
cg
consistent <- group_by( cg, grade_difference <= 2)
consistent_mean <- mean( cg$course_average, consistent == TRUE)
consistent_mean
consistent <- group_by( cg, grade_difference <= 2)    # creates a T/F column -- T is all less than or equal to 2
consistent_mean <- summarize( consistent, mean(cgroupmean))
consistent <- group_by( cg, grade_difference <= 2)    # creates a T/F column -- T is all less than or equal to 2
consistent_mean <- summarize( consistent, mean(course_average))
consistent_mean
consistent_mean <- summarize( consistent, cmean = mean(course_average))
consistent_mean
t = qt(.975, 483) # remember to find a t-value for 95% interval, you need to find .025 for either tail
t
cgxbar <- mean(cg$course_average)
cgxbar + t * sd(cg$course_average) / sqrt(483) # output = 78.24951
cgxbar - t * sd(cg$course_average) / sqrt(483) # output = 76.27501
consistent_mean + t * sd(cg$course_average, consistent == TRUE) / sqrt(483)
consistent <- group_by( cg, grade_difference <= 2)    # creates a T/F column -- T is all less than or equal to 2
consistent_mean <- summarize( consistent, cmean = mean(course_average), csd = sd(course_average))
consistent_mean
inconsistent <- group_by( cg, grade_difference >= 10)
inconsistent_mean <- summarize( inconsistent, icmean = mean(course_average), isd = sd(course_average))
inconsistent_mean
consistent_mean + tcon * 11.6 / sqrt(92)
tcon <- qt(.975, 92)
consistent_mean + tcon * 11.6 / sqrt(92)
consistent <- group_by( cg, grade_difference <= 2)    # creates a T/F column -- T is all less than or equal to 2
consistent_info <- summarize( consistent, cmean = mean(course_average), csd = sd(course_average))
consistent_info # mean is 78.6, sd is 11.6
consistent_count <- (sum(consistent == TRUE))         # count how many Trues we have
consistent_count # = 92
tcon <- qt(.975, 92)
c_upper <-78.6 + tcon * 11.6 / sqrt(92)
c-lower <- 78.6 + tcon * 11.6 / sqrt(92)
answer3 <- c(c_lower,c_upper)
c_upper <- (78.6 + tcon * 11.6 / sqrt(92))
c-lower <- (78.6 + tcon * 11.6 / sqrt(92))
c_upper <- (78.6 + tcon * 11.6 / sqrt(92))
c_lower <- (78.6 + tcon * 11.6 / sqrt(92))
answer3 <- c(c_lower,c_upper)
answer3
c_upper <- (78.6 + tcon * 11.6 / sqrt(92))
c_lower <- (78.6 - tcon * 11.6 / sqrt(92))
answer3 <- c(c_lower,c_upper)
answer3
answer3 <- c('('+c_lower,c_upper+')')
answer3
answer3 <- c('(',c_lower,c_upper,')')
answer3
answer3 <- c(c_lower, c_upper)
answer3
inconsistent_info <- summarize( inconsistent, icmean = mean(course_average), isd = sd(course_average))
inconsistent_info #
consistent
consistent == TRUE
consistent <- group_by( cg, grade_difference <= 2)    # creates a T/F column -- T is all less than or equal to 2
consistent
# Alex Gromadzki
# Titanic Homework Assignment
library(tidyverse)
library(readr)  # Provides "read_csv" function
library(dplyr)  # Allows for nicer display of data frame
setwd("~/UVA/DSI/Fall 2018/SYS/Mining in R/Homework/Homework 0/sys6018-competition-titanic/TitanicData")
original_data <- read_csv("train.csv")
sub <- sample(1:891,size=445)
# this sets all the cases where there is a value equal to one and all of the ones without a value equal to zero
# seems that the most missing data is cabin or embarked
# just going to get rid of cabin, seems like i can logically (explained later on, especially since i don't know specifics
# of cabin tiers)
training_data <- mutate(original_data,
Cabin2 = if_else(Cabin=="NA", true = 0, false = 1, missing = 0),
Age2 = if_else(Age=="NA", true = 0, false = 1, missing = 0))
# in order to use all of the NA's, I am going to calculate the mean age of all present and insert that so as not
# to skew the coefficients in one direction or another
all_with_ages <- training_data[(training_data$Age2 == 1),]
m.ages <- mean(all_with_ages$Age)
training_data2 <- mutate(training_data,
Cabin = if_else(Cabin=="NA", true = "NONE", false = Cabin, missing = "NONE"),
Age = if_else(Age=="NA", true = m.ages, false = Age, missing = m.ages))
training_data3 <- training_data2[sub,]     # Select subset for cross-validation
validation_data <- training_data2[-sub,]
testing_data <- read_csv("test.csv")
# I realized that I should probably just drop cabin since there are more unique rooms in testing.  did not
# alter the above code involving cabin, given that it might be useful later
training_data3$Cabin <- NULL
validation_data$Cabin <- NULL
# =========Variables in original data and some heuristics============
# NOTE: categotical (non-continuous) is indicated by CAT
# -PassengerId -- just to keep track of them in original ordering, should not be included in model
# Pclass -- CAT ticket class, likely correlated with the type of cabin they were in, so potential heteroskedasticity
# -Name -- Should not be included
# Sex -- CAT  Could be relevant if the "WOMEN AND CHILDREN ONLY" thing from James Cameron's interpretation was real
# Age -- CAT Mothers and children thing again
# SibSp -- CAT siblings and spouses aboard the Titanic (this might be insignificant without
# considering additional interaction term between SibSp and Sex)
# Parch -- CAT similar to the above variable, it is likely to discern that a 4 year old is a child and not a parent,
# but it is difficult to say for sure what predicted impact this might have
# -Ticket -- ticket number, should not be included
# Fare -- passenger fare is almost assuredly heteroskedasticity, but this might be better indicator than class
# Cabin -- CAT cabin number probably relates to the ticket class.
# only include if ticket data not broken down or decide on fare
# Embarked -- CAT do each of the towns in this categorical variable have significantly different demographic backgrounds?
# again, this is an interaction term thing that we never covered how to do in R
#==============Attempt====================
training_data3$Pclass <- factor(training_data3$Pclass)
training_data3$Sex <- factor(training_data3$Sex)
# training_data3$SibSp <- factor(training_data3$SibSp)    # while intuitively I would leave make these factors (discrete)
# training_data3$Parch <- factor(training_data3$Parch)    # just going to keep these continuous for now
# training_data3$Cabin <- factor(training_data3$Cabin)
training_data3$Embarked <- factor(training_data3$Embarked)
training_data3$Name <- NULL
training_data3$Ticket <- NULL
validation_data$Pclass <- factor(validation_data$Pclass)
validation_data$Sex <- factor(validation_data$Sex)
# validation_data$SibSp <- factor(validation_data$SibSp)    # while intuitively I would leave make these factors (discrete)
# validation_data$Parch <- factor(validation_data$Parch)    # just going to keep these continuous for now
# validation_data$Cabin <- factor(validation_data$Cabin)
validation_data$Embarked <- factor(validation_data$Embarked)
validation_data$Name <- NULL
validation_data$Ticket <- NULL
testing_data$Pclass <- factor(testing_data$Pclass)
testing_data$Sex <- factor(testing_data$Sex)
# testing_data$SibSp <- factor(testing_data$SibSp)      # taken from above
# testing_data$Parch <- factor(testing_data$Parch)
testing_data$Cabin <- NULL
testing_data$Embarked <- factor(testing_data$Embarked)
# training_data3$Name <- NULL
# training_data3$Ticket <- NULL
# For the first iteration of the model, I assume
# that room number and passenger class likely were correlated (passenger class simpler to deal with so removed Room)
training_glm1 <- glm(Survived ~ .-PassengerId, data=training_data3)
summary(training_glm1)
# My intuition is telling me that without being able to use any interaction terms,
#I should get rid of some potentially similar variables.
# First however, lets just assume that without any other background the destinations were the same
training_glm2 <- glm(Survived ~ .-PassengerId -Embarked, data=training_data3)
summary(training_glm2)
# how about something else... multitasking? sure why not.  trying ticket price vs class and a family status variable
training_glm3 <- glm(Survived ~ .-PassengerId -Embarked -Pclass -Parch, data=training_data3)
summary(training_glm3)
# time to try on the validation data
prep_set_valid <-
glm(Survived ~ .-PassengerId -Embarked -Pclass -Parch, data=training_data3, family = "binomial")
# note: there is an issue where there are new names within the factor variable of name, maybe just don't set as factor?
# got rid of name, along with several other types
prob_survival_valid<-as.vector(predict(prep_set_valid, newdata = validation_data, type = "response"))
pred_survival_valid <- rep(0,418)  # Initialize prediction vector
pred_survival_valid[prob_survival_valid > 0.5] <- 1 # p>0.5 -> 1
validation_data$Survived2 <- pred_survival_valid
table(pred_survival_valid,validation_data$Survived)
# ======== Testing =========
prep_set <-
glm(Survived ~ .-PassengerId -Embarked -Pclass -Parch, data=training_data2, family = "binomial")
# note: there is an issue where there are new names within the factor variable of name, maybe just don't set as factor?
# got rid of name, along with several other types
prob_survival<-as.vector(predict(prep_set, newdata = testing_data, type = "response"))
pred_survival <- rep(0,418)  # Initialize prediction vector
pred_survival[prob_survival > 0.5] <- 1 # p>0.5 -> 1
testing_data$Survived <- pred_survival
table(pred_survival,testing_data$Survived)
# Alex Gromadzki
# Titanic Homework Assignment
library(tidyverse)
library(readr)  # Provides "read_csv" function
library(dplyr)  # Allows for nicer display of data frame
setwd("~/UVA/DSI/Fall 2018/SYS/Mining in R/Homework/Homework 0/sys6018-competition-titanic/TitanicData")
original_data <- read_csv("train.csv")
sub <- sample(1:891,size=445)
# this sets all the cases where there is a value equal to one and all of the ones without a value equal to zero
# seems that the most missing data is cabin or embarked
# just going to get rid of cabin, seems like i can logically (explained later on, especially since i don't know specifics
# of cabin tiers)
training_data <- mutate(original_data,
Cabin2 = if_else(Cabin=="NA", true = 0, false = 1, missing = 0),
Age2 = if_else(Age=="NA", true = 0, false = 1, missing = 0))
# in order to use all of the NA's, I am going to calculate the mean age of all present and insert that so as not
# to skew the coefficients in one direction or another
all_with_ages <- training_data[(training_data$Age2 == 1),]
m.ages <- mean(all_with_ages$Age)
training_data2 <- mutate(training_data,
Cabin = if_else(Cabin=="NA", true = "NONE", false = Cabin, missing = "NONE"),
Age = if_else(Age=="NA", true = m.ages, false = Age, missing = m.ages))
training_data3 <- training_data2[sub,]     # Select subset for cross-validation
validation_data <- training_data2[-sub,]
testing_data <- read_csv("test.csv")
# I realized that I should probably just drop cabin since there are more unique rooms in testing.  did not
# alter the above code involving cabin, given that it might be useful later
training_data3$Cabin <- NULL
validation_data$Cabin <- NULL
# =========Variables in original data and some heuristics============
# NOTE: categotical (non-continuous) is indicated by CAT
# -PassengerId -- just to keep track of them in original ordering, should not be included in model
# Pclass -- CAT ticket class, likely correlated with the type of cabin they were in, so potential heteroskedasticity
# -Name -- Should not be included
# Sex -- CAT  Could be relevant if the "WOMEN AND CHILDREN ONLY" thing from James Cameron's interpretation was real
# Age -- CAT Mothers and children thing again
# SibSp -- CAT siblings and spouses aboard the Titanic (this might be insignificant without
# considering additional interaction term between SibSp and Sex)
# Parch -- CAT similar to the above variable, it is likely to discern that a 4 year old is a child and not a parent,
# but it is difficult to say for sure what predicted impact this might have
# -Ticket -- ticket number, should not be included
# Fare -- passenger fare is almost assuredly heteroskedasticity, but this might be better indicator than class
# Cabin -- CAT cabin number probably relates to the ticket class.
# only include if ticket data not broken down or decide on fare
# Embarked -- CAT do each of the towns in this categorical variable have significantly different demographic backgrounds?
# again, this is an interaction term thing that we never covered how to do in R
#==============Attempt====================
training_data3$Pclass <- factor(training_data3$Pclass)
training_data3$Sex <- factor(training_data3$Sex)
# training_data3$SibSp <- factor(training_data3$SibSp)    # while intuitively I would leave make these factors (discrete)
# training_data3$Parch <- factor(training_data3$Parch)    # just going to keep these continuous for now
# training_data3$Cabin <- factor(training_data3$Cabin)
training_data3$Embarked <- factor(training_data3$Embarked)
training_data3$Name <- NULL
training_data3$Ticket <- NULL
validation_data$Pclass <- factor(validation_data$Pclass)
validation_data$Sex <- factor(validation_data$Sex)
# validation_data$SibSp <- factor(validation_data$SibSp)    # while intuitively I would leave make these factors (discrete)
# validation_data$Parch <- factor(validation_data$Parch)    # just going to keep these continuous for now
# validation_data$Cabin <- factor(validation_data$Cabin)
validation_data$Embarked <- factor(validation_data$Embarked)
validation_data$Name <- NULL
validation_data$Ticket <- NULL
testing_data$Pclass <- factor(testing_data$Pclass)
testing_data$Sex <- factor(testing_data$Sex)
# testing_data$SibSp <- factor(testing_data$SibSp)      # taken from above
# testing_data$Parch <- factor(testing_data$Parch)
testing_data$Cabin <- NULL
testing_data$Embarked <- factor(testing_data$Embarked)
# training_data3$Name <- NULL
# training_data3$Ticket <- NULL
# For the first iteration of the model, I assume
# that room number and passenger class likely were correlated (passenger class simpler to deal with so removed Room)
training_glm1 <- glm(Survived ~ .-PassengerId, data=training_data3)
summary(training_glm1)
# My intuition is telling me that without being able to use any interaction terms,
#I should get rid of some potentially similar variables.
# First however, lets just assume that without any other background the destinations were the same
training_glm2 <- glm(Survived ~ .-PassengerId -Embarked, data=training_data3)
summary(training_glm2)
# how about something else... multitasking? sure why not.  trying ticket price vs class and a family status variable
training_glm3 <- glm(Survived ~ .-PassengerId -Embarked -Pclass -Parch, data=training_data3)
summary(training_glm3)
# time to try on the validation data
prep_set_valid <-
glm(Survived ~ .-PassengerId -Embarked -Pclass -Parch, data=training_data3, family = "binomial")
# note: there is an issue where there are new names within the factor variable of name, maybe just don't set as factor?
# got rid of name, along with several other types
prob_survival_valid<-as.vector(predict(prep_set_valid, newdata = validation_data, type = "response"))
pred_survival_valid <- rep(0,418)  # Initialize prediction vector
pred_survival_valid[prob_survival_valid > 0.5] <- 1 # p>0.5 -> 1
validation_data$Survived2 <- pred_survival_valid
table(pred_survival_valid,validation_data$Survived)
# ======== Testing =========
prep_set <-
glm(Survived ~ .-PassengerId -Embarked -Pclass -Parch, data=training_data2, family = "binomial")
# note: there is an issue where there are new names within the factor variable of name, maybe just don't set as factor?
# got rid of name, along with several other types
prob_survival<-as.vector(predict(prep_set, newdata = testing_data, type = "response"))
pred_survival <- rep(0,418)  # Initialize prediction vector
pred_survival[prob_survival > 0.5] <- 1 # p>0.5 -> 1
testing_data$Survived <- pred_survival
table(pred_survival,testing_data$Survived)
testing_data
